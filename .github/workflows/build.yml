name: Build

on:
  push:
    branches: [ "master" ]
    tags: [ "v*" ]
  pull_request:
    branches: [ "master" ]

jobs:
  build:
    strategy:
      matrix:
        target:
          - x86_64-unknown-linux-gnu
          - x86_64-pc-windows-msvc
          - x86_64-apple-darwin
          - aarch64-apple-darwin
        include:
          - target: x86_64-unknown-linux-gnu
            os: ubuntu-latest
          - target: x86_64-pc-windows-msvc
            os: windows-latest
            ext: .exe
          - target: x86_64-apple-darwin
            os: macos-latest
          - target: aarch64-apple-darwin
            os: macos-latest
      fail-fast: false
    runs-on: ${{ matrix.os }}

    steps:
      - uses: actions/checkout@v4

      - uses: dtolnay/rust-toolchain@stable
        with:
          targets: ${{ matrix.target }}

      - uses: Swatinem/rust-cache@v2
        with:
          key: ${{ matrix.target }}

      - name: Build
        env:
          CARGO_TARGET_X86_64_PC_WINDOWS_MSVC_LINKER: rust-lld.exe
        run: cargo build --release --target ${{ matrix.target }}

      - name: Upload artifact
        uses: actions/upload-artifact@v4
        with:
          name: mchprs-${{ matrix.target }}
          path: target/${{ matrix.target }}/release/mchprs${{ matrix.ext }}

  build-macos-universal:
    needs: build
    runs-on: macos-latest
    steps:
      - uses: actions/download-artifact@v4
        with:
          name: mchprs-x86_64-apple-darwin
          path: x86_64
      - uses: actions/download-artifact@v4
        with:
          name: mchprs-aarch64-apple-darwin
          path: aarch64

      - name: Create universal binary
        run: lipo -create -output mchprs x86_64/mchprs aarch64/mchprs

      - name: Upload artifact
        uses: actions/upload-artifact@v4
        with:
          name: mchprs-universal-apple-darwin
          path: mchprs

  publish:
    needs: [build, build-macos-universal]
    runs-on: ubuntu-latest
    permissions:
      contents: write
    if: github.event_name == 'push'
    steps:
      - uses: actions/checkout@v3
      - uses: actions/download-artifact@v4
        with:
          path: artifacts
      - name: Reorganize artifacts
        run: |
          mkdir -p dist/
          find artifacts/ -type f -exec bash -c 'base=$(basename $1); mv $1 dist/$(basename $(dirname $1))${base#${base%.*}}' _ {} \;

      - name: Create preview release
        env:
          GITHUB_TOKEN: ${{ github.token }}
        run: |
          gh release delete preview --yes || true
          gh release create preview \
            --prerelease \
            --title "${GITHUB_REPOSITORY} Preview Build" \
            --notes "ðŸš§ **This is a preview build of the latest commit.**" \
            dist/*

      - name: Create release
        if: startsWith(github.ref, 'refs/tags/')
        env:
          GITHUB_TOKEN: ${{ github.token }}
          tag: ${{ github.ref_name }}
        run: |
          gh release create "$tag" \
            --title "${GITHUB_REPOSITORY} ${tag#v}" \
            --generate-notes \
            dist/*
