use std::fs::File;
use std::io::{BufWriter, Write};

use itertools::Itertools;
use mchprs_blocks::blocks::ComparatorMode;
use mchprs_blocks::BlockPos;
use mchprs_core::redpiler::backend::direct::DirectBackend;
use mchprs_core::redpiler::backend::{BackendDispatcher, JITBackend};
use mchprs_core::redpiler::compile_graph::{
    CompileGraph, CompileLink, CompileNode, NodeState, NodeType,
};
use mchprs_core::redpiler::{Compiler, CompilerOptions};

/// Results will be stored in `./state_machines.txt`
fn main() {
    let bitstream: Vec<bool> = "FTFTTTTFTFTFFTFTTFFFTTTTTFTFTTTFTFFTFFTTFTFFTTFFFFFFFTTFTFFTTFFTTTFTTTTFFTFFTFFFFTTTTFFFTFFFFFTTFTTTTTTTTTTFTFTFTFTFTTFFTTTFTFFTTFTFTFFTTTFFTFTTTTFTFFTFFTTFFFTTTFFFFFTTTTFTTFFFTTTTFFFTFTTTTTFFFFFTTTTFTFTFTTTTTFTFTTTFTFFFFTFTFFTTFFTTTTFTFFTTFFTTTTTFTTTTFFFFFFFTFTFFTFFFTTFFTFFFTTTFTFTTTFFFFFFTTFFFFTTTFFFTFFFFTTFFTTFFTTTFTFFTTTFFFFFFFTTFFFTTFFTFTFTFFFFTFTFFTFTTTTFTTFFFTTFTFTFTFFFFFFTTTTTFFTTFFTTTFTFTTTTTTFFFFTFTFFFFTFTTFTTFFFTFTTFTTTTFFTFTTTTFTFFFTTFTFTFTTTFFFFTFTTFTFFFFFFTTFFFFFTFFTTFTFFFTTTFTFFTTFTTFTTFTTTTFTFTFFFFTTTTTFFTFFFFTTFTTFFTTTFTFFTFTTFTTTFFFTTTTTFFFTFTTTTFFTTTTTTTTFTFFTTTFTFTFTFFTFTFFFTTTTFTTTFTTTTFTFTTFFFFTTTTTTTTFTTTTTFFFTTTTTFFTFFFFTFTFFFFFTFTTFTFTFTFTFTTTFTTTFTTFFFTTFFTFFFFTTFFFTFFFTFFTFFTFTTFFTFTFTFTTFFFTFFFFFTFFFTFFFFTFFFTTTFTFTFFTTFTTFFFTTTTFFTFFFFFFTFTTFTTTTTTTTFFFTTTFFTTFFTTFFTTFFFFFFFFTTTTTFFTTFTTTTFFTFFFTFFTTTFTFTTTTTTTTTFFFTFFTTTFFTFTTTTFFFTTFTTFTTFFTFTFTFFFFFFTFFFFFTFTTTFFFFTFFFTFTTFTFFTFFTFFFFTTTFFFFFTFFFFTTFFFFFFTTFTTFTFTTFFFTFFFTTTTTFFTFTTTFTTTTFTTTTFFFTFFFFFTF".chars().map(|c| c == 'T').collect();

    let mut graph = CompileGraph::default();
    let line_names = (0..10)
        .flat_map(|i| {
            let mut line: Vec<Vec<u8>> = vec![vec![]];
            for _ in 0..i {
                let mut next = vec![];
                for e in line {
                    next.append(&mut extend_line(&e));
                }
                line = next;
            }
            line
        })
        .collect_vec();
    let lines = line_names
        .iter()
        .enumerate()
        .map(|(i, data)| add_line(&mut graph, i, data))
        .collect_vec();

    let mut backend = DirectBackend::default();
    backend.compile(graph, vec![]);

    let mut compiler = Compiler::new_unsafe(
        Some(BackendDispatcher::DirectBackend(backend)),
        CompilerOptions::default(),
    );
    // Make sure all components are in a stable state and have settled
    for _ in 0..100 {
        compiler.tick();
        compiler.tick();
        compiler.tick();
        for i in 0..lines.len() {
            compiler.on_use_block(BlockPos::new(i as i32, 0, 0));
        }
    }
    for _ in 0..100 {
        compiler.tick();
    }

    // Run the experiment
    let mut outputs = (0..lines.len()).map(|_| vec![]).collect_vec();
    for toggle in [false]
        .iter()
        .chain(bitstream.iter())
        .tuple_windows()
        .map(|(a, b)| a != b)
        .chain([false].repeat(100))
    {
        if toggle {
            for i in 0..lines.len() {
                compiler.on_use_block(BlockPos::new(i as i32, 0, 0));
            }
        }
        for line in 0..lines.len() {
            let result = compiler.inspect(BlockPos::new(line as i32, 1, 0));
            outputs[line].push(result.unwrap().0);
        }
        compiler.tick();
    }

    // Output data
    let mut fmt_outputs = vec![];
    for (i, line) in lines.iter().enumerate() {
        let fmt_output: String = outputs[i]
            .iter()
            .skip(line.len() / 2)
            .take(bitstream.len())
            .map(|&b| if b { 'T' } else { 'F' })
            .collect();

        fmt_outputs.push((line.clone(), fmt_output));
    }

    let file = File::create("./line_types.txt").unwrap();
    let mut f = BufWriter::new(file);
    for (line, fmt_output, name) in fmt_outputs
        .iter()
        .unique_by(|(_, x)| x.clone())
        .map(|(a, b)| (a, b, find_name(b)))
        .sorted_by_key(|&(_, _, x)| x)
    {
        let selection = fmt_outputs
            .iter()
            .filter(|(_, x)| x == fmt_output)
            .unique_by(|(x, _)| x)
            .map(|(x, _)| x)
            .collect_vec();
        writeln!(
            f,
            "{} | {:>10} ({:>6}): {} {:?}",
            name,
            line,
            selection.len(),
            fmt_output,
            selection
        )
        .unwrap();
        writeln!(f, "").unwrap();
    }
}

// Returns all possible lines that have one component more than `line`
fn extend_line(line: &[u8]) -> Vec<Vec<u8>> {
    let mut result = vec![];
    result.push([0].into_iter().chain(line.to_vec()).collect_vec());
    result.push([1].into_iter().chain(line.to_vec()).collect_vec());
    result.push([2].into_iter().chain(line.to_vec()).collect_vec());
    if line.len() > 0 && (line[0] == 1 || line[0] == 2) {
        result.push([3].into_iter().chain(line.to_vec()).collect_vec());
        result.push([4].into_iter().chain(line.to_vec()).collect_vec());
    }
    result
}

fn add_line(graph: &mut CompileGraph, id: usize, data: &[u8]) -> String {
    let mut name = String::new();
    let lever = graph.add_node(new_node(
        NodeType::Lever,
        Some(BlockPos::new(id as i32, 0, 0)),
    ));

    let mut last = lever;
    for datum in data {
        let (ty_name, ty, facing_diode) = match datum {
            0 => ("T-", NodeType::Torch, false),
            1 => ("R-", NodeType::Repeater(1), false),
            2 => ("C-", NodeType::Comparator(ComparatorMode::Compare), false),
            3 => ("R>", NodeType::Repeater(1), true),
            4 => ("C>", NodeType::Comparator(ComparatorMode::Compare), true),
            _ => panic!(),
        };
        name += ty_name;
        let component = graph.add_node(new_node(ty, None));
        if facing_diode {
            graph[component].facing_diode = true;
        }
        graph.add_edge(last, component, CompileLink::default(0));
        last = component;
    }

    let trapdoor = graph.add_node(new_node(
        NodeType::Trapdoor,
        Some(BlockPos::new(id as i32, 1, 0)),
    ));
    graph.add_edge(last, trapdoor, CompileLink::default(0));
    return name;
}

fn new_node(ty: NodeType, block: Option<BlockPos>) -> CompileNode {
    CompileNode {
        ty,
        block: block.map(|x| (x, 0)),
        state: NodeState::default(),
        facing_diode: false,
        comparator_far_input: None,
        is_input: ty == NodeType::Lever,
        is_output: ty == NodeType::Trapdoor,
    }
}

fn find_name(bits: &str) -> &str {
    match bits {
        "FTFTTTTFTFTFFTFTTFFFTTTTTFTFTTTFTFFTFFTTFTFFTTFFFFFFFTTFTFFTTFFTTTFTTTTFFTFFTFFFFTTTTFFFTFFFFFTTFTTTTTTTTTTFTFTFTFTFTTFFTTTFTFFTTFTFTFFTTTFFTFTTTTFTFFTFFTTFFFTTTFFFFFTTTTFTTFFFTTTTFFFTFTTTTTFFFFFTTTTFTFTFTTTTTFTFTTTFTFFFFTFTFFTTFFTTTTFTFFTTFFTTTTTFTTTTFFFFFFFTFTFFTFFFTTFFTFFFTTTFTFTTTFFFFFFTTFFFFTTTFFFTFFFFTTFFTTFFTTTFTFFTTTFFFFFFFTTFFFTTFFTFTFTFFFFTFTFFTFTTTTFTTFFFTTFTFTFTFFFFFFTTTTTFFTTFFTTTFTFTTTTTTFFFFTFTFFFFTFTTFTTFFFTFTTFTTTTFFTFTTTTFTFFFTTFTFTFTTTFFFFTFTTFTFFFFFFTTFFFFFTFFTTFTFFFTTTFTFFTTFTTFTTFTTTTFTFTFFFFTTTTTFFTFFFFTTFTTFFTTTFTFFTFTTFTTTFFFTTTTTFFFTFTTTTFFTTTTTTTTFTFFTTTFTFTFTFFTFTFFFTTTTFTTTFTTTTFTFTTFFFFTTTTTTTTFTTTTTFFFTTTTTFFTFFFFTFTFFFFFTFTTFTFTFTFTFTTTFTTTFTTFFFTTFFTFFFFTTFFFTFFFTFFTFFTFTTFFTFTFTFTTFFFTFFFFFTFFFTFFFFTFFFTTTFTFTFFTTFTTFFFTTTTFFTFFFFFFTFTTFTTTTTTTTFFFTTTFFTTFFTTFFTTFFFFFFFFTTTTTFFTTFTTTTFFTFFFTFFTTTFTFTTTTTTTTTFFFTFFTTTFFTFTTTTFFFTTFTTFTTFFTFTFTFFFFFFTFFFFFTFTTTFFFFTFFFTFTTFTFFTFFTFFFFTTTFFFFFTFFFFTTFFFFFFTTFTTFTFTTFFFTFFFTTTTTFFTFTTTFTTTTFTTTTFFFTFFFFFTF" => "1. P  ",
        "TFTFFFFTFTFTTFTFFTTTFFFFFTFTFFFTFTTFTTFFTFTTFFTTTTTTTFFTFTTFFTTFFFTFFFFTTFTTFTTTTFFFFTTTFTTTTTFFTFFFFFFFFFFTFTFTFTFTFFTTFFFTFTTFFTFTFTTFFFTTFTFFFFTFTTFTTFFTTTFFFTTTTTFFFFTFFTTTFFFFTTTFTFFFFFTTTTTFFFFTFTFTFFFFFTFTFFFTFTTTTFTFTTFFTTFFFFTFTTFFTTFFFFFTFFFFTTTTTTTFTFTTFTTTFFTTFTTTFFFTFTFFFTTTTTTFFTTTTFFFTTTFTTTTFFTTFFTTFFFTFTTFFFTTTTTTTFFTTTFFTTFTFTFTTTTFTFTTFTFFFFTFFTTTFFTFTFTFTTTTTTFFFFFTTFFTTFFFTFTFFFFFFTTTTFTFTTTTFTFFTFFTTTFTFFTFFFFTTFTFFFFTFTTTFFTFTFTFFFTTTTFTFFTFTTTTTTFFTTTTTFTTFFTFTTTFFFTFTTFFTFFTFFTFFFFTFTFTTTTFFFFFTTFTTTTFFTFFTTFFFTFTTFTFFTFFFTTTFFFFFTTTFTFFFFTTFFFFFFFFTFTTFFFTFTFTFTTFTFTTTFFFFTFFFTFFFFTFTFFTTTTFFFFFFFFTFFFFFTTTFFFFFTTFTTTTFTFTTTTTFTFFTFTFTFTFTFFFTFFFTFFTTTFFTTFTTTTFFTTTFTTTFTTFTTFTFFTTFTFTFTFFTTTFTTTTTFTTTFTTTTFTTTFFFTFTFTTFFTFFTTTFFFFTTFTTTTTTFTFFTFFFFFFFFTTTFFFTTFFTTFFTTFFTTTTTTTTFFFFFTTFFTFFFFTTFTTTFTTFFFTFTFFFFFFFFFTTTFTTFFFTTFTFFFFTTTFFTFFTFFTTFTFTFTTTTTTFTTTTTFTFFFTTTTFTTTFTFFTFTTFTTFTTTTFFFTTTTTFTTTTFFTTTTTTFFTFFTFTFFTTTFTTTFFFFFTTFTFFFTFFFFTFFFFTTTFTTTTTFT" => "2. Pn ",
        "FFFTTTTTTTTFFFFTTFFFTTTTTTTTTTTTTFFFFFTTTTFFTTFFFFFFFTTTTFFTTFFTTTTTTTTFFFFFFFFFFTTTTFFFFFFFFFTTTTTTTTTTTTTTTTTTTTTTTTFFTTTTTFFTTTTTTFFTTTFFFFTTTTTTFFFFFTTFFFTTTFFFFFTTTTTTTFFFTTTTFFFFFTTTTTFFFFFTTTTTTTTTTTTTTTTTTTTTTFFFFFFFFFTTFFTTTTTTFFTTFFTTTTTTTTTTFFFFFFFFFFFFFFFFTTFFFFFFTTTTTTTTTFFFFFFTTFFFFTTTFFFFFFFFTTFFTTFFTTTTTFFTTTFFFFFFFTTFFFTTFFFFFFFFFFFFFFFFFFTTTTTTTFFFTTTTTTTTFFFFFFTTTTTFFTTFFTTTTTTTTTTTTFFFFFFFFFFFFFTTTTTFFFFFTTTTTTTFFFFTTTTTTFFFTTTTTTTTTTFFFFFFTTTTFFFFFFTTFFFFFFFFTTTTFFFTTTTTFFTTTTTTTTTTTTTTTTTFFFFTTTTTFFFFFFFTTTTTFFTTTTTFFFFTTTTTTFFFTTTTTFFFFFTTTTFFTTTTTTTTTTFFTTTTTTTTTFFFFFFFFTTTTTTTTTTTTTTTTTTFFFFTTTTTTTTTTTTTTFFFTTTTTFFFFFFFFFFFFFFFFFTTTTTTTTTTTTTTTTTTTTTFFFTTFFFFFFFTTFFFFFFFFFFFFFFFTTFFFFFFFFTTFFFFFFFFFFFFFFFFFFFFFFTTTTTTTFFTTTTTFFFTTTTFFFFFFFFFFFTTTTTTTTTTTFFFTTTFFTTFFTTFFTTFFFFFFFFTTTTTFFTTTTTTTFFFFFFFFFTTTTTTTTTTTTTTTFFFFFFTTTFFFFTTTTFFFTTTTTTTTFFFFFFFFFFFFFFFFFFFFFTTTFFFFFFFFFFTTTTFFFFFFFFFFTTTFFFFFFFFFFTTFFFFFFTTTTTTTTTTFFFFFFFTTTTTFFFFTTTTTTTTTTTTTFFFFFFFFFFF" => "3. D  ",
        "TTTFFFFFFFFTTTTFFTTTFFFFFFFFFFFFFTTTTTFFFFTTFFTTTTTTTFFFFTTFFTTFFFFFFFFTTTTTTTTTTFFFFTTTTTTTTTFFFFFFFFFFFFFFFFFFFFFFFFTTFFFFFTTFFFFFFTTFFFTTTTFFFFFFTTTTTFFTTTFFFTTTTTFFFFFFFTTTFFFFTTTTTFFFFFTTTTTFFFFFFFFFFFFFFFFFFFFFFTTTTTTTTTFFTTFFFFFFTTFFTTFFFFFFFFFFTTTTTTTTTTTTTTTTFFTTTTTTFFFFFFFFFTTTTTTFFTTTTFFFTTTTTTTTFFTTFFTTFFFFFTTFFFTTTTTTTFFTTTFFTTTTTTTTTTTTTTTTTTFFFFFFFTTTFFFFFFFFTTTTTTFFFFFTTFFTTFFFFFFFFFFFFTTTTTTTTTTTTTFFFFFTTTTTFFFFFFFTTTTFFFFFFTTTFFFFFFFFFFTTTTTTFFFFTTTTTTFFTTTTTTTTFFFFTTTFFFFFTTFFFFFFFFFFFFFFFFFTTTTFFFFFTTTTTTTFFFFFTTFFFFFTTTTFFFFFFTTTFFFFFTTTTTFFFFTTFFFFFFFFFFTTFFFFFFFFFTTTTTTTTFFFFFFFFFFFFFFFFFFTTTTFFFFFFFFFFFFFFTTTFFFFFTTTTTTTTTTTTTTTTTFFFFFFFFFFFFFFFFFFFFFTTTFFTTTTTTTFFTTTTTTTTTTTTTTTFFTTTTTTTTFFTTTTTTTTTTTTTTTTTTTTTTFFFFFFFTTFFFFFTTTFFFFTTTTTTTTTTTFFFFFFFFFFFTTTFFFTTFFTTFFTTFFTTTTTTTTFFFFFTTFFFFFFFTTTTTTTTTFFFFFFFFFFFFFFFTTTTTTFFFTTTTFFFFTTTFFFFFFFFTTTTTTTTTTTTTTTTTTTTTFFFTTTTTTTTTTFFFFTTTTTTTTTTFFFTTTTTTTTTTFFTTTTTTFFFFFFFFFFTTTTTTTFFFFFTTTTFFFFFFFFFFFFFTTTTTTTTTTT" => "4. Dn ",
        "FFFTTTTFFFFFFFFTTFFFTTTTTFFFTTTFFFFFFFTTFFFFTTFFFFFFFTTFFFFTTFFTTTFTTTTFFFFFFFFFFTTTTFFFFFFFFFTTFTTTTTTTTTTFFFFFFFFFTTFFTTTFFFFTTFFFFFFTTTFFFFTTTTFFFFFFFTTFFFTTTFFFFFTTTTFTTFFFTTTTFFFFFTTTTTFFFFFTTTTFFFFFTTTTTFFFTTTFFFFFFFFFFFTTFFTTTTFFFFTTFFTTTTTFTTTTFFFFFFFFFFFFFFFFTTFFFFFFTTTFFFTTTFFFFFFTTFFFFTTTFFFFFFFFTTFFTTFFTTTFFFFTTTFFFFFFFTTFFFTTFFFFFFFFFFFFFFFFFFTTTTFTTFFFTTFFFFFFFFFFFFTTTTTFFTTFFTTTFFFTTTTTTFFFFFFFFFFFFFTTFTTFFFFFTTFTTTTFFFFTTTTFFFFFTTFFFFFTTTFFFFFFTTFFFFFFFFTTFFFFFFFFTTFFFFFTTTFFFFTTFTTFTTFTTTTFFFFFFFFTTTTTFFFFFFFTTFTTFFTTTFFFFFFTTFTTTFFFTTTTTFFFFFTTTTFFTTTTTTTTFFFFTTTFFFFFFFFFFFFFFTTTTFTTTFTTTTFFFTTFFFFTTTTTTTTFTTTTTFFFTTTTTFFFFFFFFFFFFFFFFFTTFFFFFFFFFTTTFTTTFTTFFFTTFFFFFFFTTFFFFFFFFFFFFFFFTTFFFFFFFFTTFFFFFFFFFFFFFFFFFFFFFFTTTFFFFFFTTFTTFFFTTTTFFFFFFFFFFFTTFTTTTTTTTFFFTTTFFTTFFTTFFTTFFFFFFFFTTTTTFFTTFTTTTFFFFFFFFFTTTFFFTTTTTTTTTFFFFFFTTTFFFFTTTTFFFTTFTTFTTFFFFFFFFFFFFFFFFFFFFFTTTFFFFFFFFFFTTFFFFFFFFFFFFTTTFFFFFFFFFFTTFFFFFFTTFTTFFFTTFFFFFFFTTTTTFFFFTTTFTTTTFTTTTFFFFFFFFFFF" => "5. R1 ",
        "TTTFFFFTTTTTTTTFFTTTFFFFFTTTFFFTTTTTTTFFTTTTFFTTTTTTTFFTTTTFFTTFFFTFFFFTTTTTTTTTTFFFFTTTTTTTTTFFTFFFFFFFFFFTTTTTTTTTFFTTFFFTTTTFFTTTTTTFFFTTTTFFFFTTTTTTTFFTTTFFFTTTTTFFFFTFFTTTFFFFTTTTTFFFFFTTTTTFFFFTTTTTFFFFFTTTFFFTTTTTTTTTTTFFTTFFFFTTTTFFTTFFFFFTFFFFTTTTTTTTTTTTTTTTFFTTTTTTFFFTTTFFFTTTTTTFFTTTTFFFTTTTTTTTFFTTFFTTFFFTTTTFFFTTTTTTTFFTTTFFTTTTTTTTTTTTTTTTTTFFFFTFFTTTFFTTTTTTTTTTTTFFFFFTTFFTTFFFTTTFFFFFFTTTTTTTTTTTTTFFTFFTTTTTFFTFFFFTTTTFFFFTTTTTFFTTTTTFFFTTTTTTFFTTTTTTTTFFTTTTTTTTFFTTTTTFFFTTTTFFTFFTFFTFFFFTTTTTTTTFFFFFTTTTTTTFFTFFTTFFFTTTTTTFFTFFFTTTFFFFFTTTTTFFFFTTFFFFFFFFTTTTFFFTTTTTTTTTTTTTTFFFFTFFFTFFFFTTTFFTTTTFFFFFFFFTFFFFFTTTFFFFFTTTTTTTTTTTTTTTTTFFTTTTTTTTTFFFTFFFTFFTTTFFTTTTTTTFFTTTTTTTTTTTTTTTFFTTTTTTTTFFTTTTTTTTTTTTTTTTTTTTTTFFFTTTTTTFFTFFTTTFFFFTTTTTTTTTTTFFTFFFFFFFFTTTFFFTTFFTTFFTTFFTTTTTTTTFFFFFTTFFTFFFFTTTTTTTTTFFFTTTFFFFFFFFFTTTTTTFFFTTTTFFFFTTTFFTFFTFFTTTTTTTTTTTTTTTTTTTTTFFFTTTTTTTTTTFFTTTTTTTTTTTTFFFTTTTTTTTTTFFTTTTTTFFTFFTTTFFTTTTTTTFFFFFTTTTFFFTFFFFTFFFFTTTTTTTTTTT" => "6. R1n",
        "FFFTTTTFFFFFFFFTTFFFTTTTTFFFTTTFFFFFFFTTFFFFTTFFFFFFFTTFFFFTTFFTTTTTTTTFFFFFFFFFFTTTTFFFFFFFFFTTTTTTTTTTTTTFFFFFFFFFTTFFTTTFFFFTTFFFFFFTTTFFFFTTTTFFFFFFFTTFFFTTTFFFFFTTTTTTTFFFTTTTFFFFFTTTTTFFFFFTTTTFFFFFTTTTTFFFTTTFFFFFFFFFFFTTFFTTTTFFFFTTFFTTTTTTTTTTFFFFFFFFFFFFFFFFTTFFFFFFTTTFFFTTTFFFFFFTTFFFFTTTFFFFFFFFTTFFTTFFTTTFFFFTTTFFFFFFFTTFFFTTFFFFFFFFFFFFFFFFFFTTTTTTTFFFTTFFFFFFFFFFFFTTTTTFFTTFFTTTFFFTTTTTTFFFFFFFFFFFFFTTTTTFFFFFTTTTTTTFFFFTTTTFFFFFTTFFFFFTTTFFFFFFTTFFFFFFFFTTFFFFFFFFTTFFFFFTTTFFFFTTTTTTTTTTTTTFFFFFFFFTTTTTFFFFFFFTTTTTFFTTTFFFFFFTTTTTTFFFTTTTTFFFFFTTTTFFTTTTTTTTFFFFTTTFFFFFFFFFFFFFFTTTTTTTTTTTTTFFFTTFFFFTTTTTTTTTTTTTTFFFTTTTTFFFFFFFFFFFFFFFFFTTFFFFFFFFFTTTTTTTTTTFFFTTFFFFFFFTTFFFFFFFFFFFFFFFTTFFFFFFFFTTFFFFFFFFFFFFFFFFFFFFFFTTTFFFFFFTTTTTFFFTTTTFFFFFFFFFFFTTTTTTTTTTTFFFTTTFFTTFFTTFFTTFFFFFFFFTTTTTFFTTTTTTTFFFFFFFFFTTTFFFTTTTTTTTTFFFFFFTTTFFFFTTTTFFFTTTTTTTTFFFFFFFFFFFFFFFFFFFFFTTTFFFFFFFFFFTTFFFFFFFFFFFFTTTFFFFFFFFFFTTFFFFFFTTTTTFFFTTFFFFFFFTTTTTFFFFTTTTTTTTTTTTTFFFFFFFFFFF" => "7. R2 ",
        "TTTFFFFTTTTTTTTFFTTTFFFFFTTTFFFTTTTTTTFFTTTTFFTTTTTTTFFTTTTFFTTFFFFFFFFTTTTTTTTTTFFFFTTTTTTTTTFFFFFFFFFFFFFTTTTTTTTTFFTTFFFTTTTFFTTTTTTFFFTTTTFFFFTTTTTTTFFTTTFFFTTTTTFFFFFFFTTTFFFFTTTTTFFFFFTTTTTFFFFTTTTTFFFFFTTTFFFTTTTTTTTTTTFFTTFFFFTTTTFFTTFFFFFFFFFFTTTTTTTTTTTTTTTTFFTTTTTTFFFTTTFFFTTTTTTFFTTTTFFFTTTTTTTTFFTTFFTTFFFTTTTFFFTTTTTTTFFTTTFFTTTTTTTTTTTTTTTTTTFFFFFFFTTTFFTTTTTTTTTTTTFFFFFTTFFTTFFFTTTFFFFFFTTTTTTTTTTTTTFFFFFTTTTTFFFFFFFTTTTFFFFTTTTTFFTTTTTFFFTTTTTTFFTTTTTTTTFFTTTTTTTTFFTTTTTFFFTTTTFFFFFFFFFFFFFTTTTTTTTFFFFFTTTTTTTFFFFFTTFFFTTTTTTFFFFFFTTTFFFFFTTTTTFFFFTTFFFFFFFFTTTTFFFTTTTTTTTTTTTTTFFFFFFFFFFFFFTTTFFTTTTFFFFFFFFFFFFFFTTTFFFFFTTTTTTTTTTTTTTTTTFFTTTTTTTTTFFFFFFFFFFTTTFFTTTTTTTFFTTTTTTTTTTTTTTTFFTTTTTTTTFFTTTTTTTTTTTTTTTTTTTTTTFFFTTTTTTFFFFFTTTFFFFTTTTTTTTTTTFFFFFFFFFFFTTTFFFTTFFTTFFTTFFTTTTTTTTFFFFFTTFFFFFFFTTTTTTTTTFFFTTTFFFFFFFFFTTTTTTFFFTTTTFFFFTTTFFFFFFFFTTTTTTTTTTTTTTTTTTTTTFFFTTTTTTTTTTFFTTTTTTTTTTTTFFFTTTTTTTTTTFFTTTTTTFFFFFTTTFFTTTTTTTFFFFFTTTTFFFFFFFFFFFFFTTTTTTTTTTT" => "8. R2n",
        "FTTTTTTTTTTFFTTTTFFFTTTTTTTTTTTTTFFTFFTTTTFFTTFFFFFFFTTTTFFTTFFTTTTTTTTFFTFFTFFFFTTTTFFFTFFFFFTTTTTTTTTTTTTTTTTTTTTTTTFFTTTTTFFTTTTTTFFTTTFFTTTTTTTTFFTFFTTFFFTTTFFFFFTTTTTTTFFFTTTTFFFTTTTTTTFFFFFTTTTTTTTTTTTTTTTTTTTTTFFFFTTTFFTTFFTTTTTTFFTTFFTTTTTTTTTTFFFFFFFTTTFFTFFFTTFFTFFFTTTTTTTTTFFFFFFTTFFFFTTTFFFTFFFFTTFFTTFFTTTTTFFTTTFFFFFFFTTFFFTTFFTTTTTFFFFTTTFFTTTTTTTTTFFFTTTTTTTTFFFFFFTTTTTFFTTFFTTTTTTTTTTTTFFFFTTTFFFFTTTTTTTFFFTTTTTTTTTFFTTTTTTTTFFFTTTTTTTTTTFFFFTTTTTTFFFFFFTTFFFFFTFFTTTTFFFTTTTTFFTTTTTTTTTTTTTTTTTFFFFTTTTTFFTFFFFTTTTTFFTTTTTFFTTTTTTTTFFFTTTTTFFFTTTTTTFFTTTTTTTTTTFFTTTTTTTTTFFTTTFFFTTTTTTTTTTTTTTTTTTFFFFTTTTTTTTTTTTTTFFFTTTTTFFTFFFFTTTFFFFFTTTTTTTTTTTTTTTTTTTTTTTFFFTTFFTFFFFTTFFFTFFFTFFTFFTTTTFFTTTTTTTTFFFTFFFFFTFFFTFFFFTFFFTTTTTTTFFTTTTTFFFTTTTFFTFFFFFFTTTTTTTTTTTTTFFFTTTFFTTFFTTFFTTFFFFFFFFTTTTTFFTTTTTTTFFTFFFTFFTTTTTTTTTTTTTTTFFFTFFTTTFFTTTTTTFFFTTTTTTTTFFTTTTTFFFFFFTFFFFFTTTTTFFFFTFFFTTTTTTFFTFFTFFFFTTTFFFFFTFFFFTTFFFFFFTTTTTTTTTTFFFTFFFTTTTTFFTTTTTTTTTTTTTTTFFFTFFFFFTF" => "9. F1 ",
        "TFFFFFFFFFFTTFFFFTTTFFFFFFFFFFFFFTTFTTFFFFTTFFTTTTTTTFFFFTTFFTTFFFFFFFFTTFTTFTTTTFFFFTTTFTTTTTFFFFFFFFFFFFFFFFFFFFFFFFTTFFFFFTTFFFFFFTTFFFTTFFFFFFFFTTFTTFFTTTFFFTTTTTFFFFFFFTTTFFFFTTTFFFFFFFTTTTTFFFFFFFFFFFFFFFFFFFFFFTTTTFFFTTFFTTFFFFFFTTFFTTFFFFFFFFFFTTTTTTTFFFTTFTTTFFTTFTTTFFFFFFFFFTTTTTTFFTTTTFFFTTTFTTTTFFTTFFTTFFFFFTTFFFTTTTTTTFFTTTFFTTFFFFFTTTTFFFTTFFFFFFFFFTTTFFFFFFFFTTTTTTFFFFFTTFFTTFFFFFFFFFFFFTTTTFFFTTTTFFFFFFFTTTFFFFFFFFFTTFFFFFFFFTTTFFFFFFFFFFTTTTFFFFFFTTTTTTFFTTTTTFTTFFFFTTTFFFFFTTFFFFFFFFFFFFFFFFFTTTTFFFFFTTFTTTTFFFFFTTFFFFFTTFFFFFFFFTTTFFFFFTTTFFFFFFTTFFFFFFFFFFTTFFFFFFFFFTTFFFTTTFFFFFFFFFFFFFFFFFFTTTTFFFFFFFFFFFFFFTTTFFFFFTTFTTTTFFFTTTTTFFFFFFFFFFFFFFFFFFFFFFFTTTFFTTFTTTTFFTTTFTTTFTTFTTFFFFTTFFFFFFFFTTTFTTTTTFTTTFTTTTFTTTFFFFFFFTTFFFFFTTTFFFFTTFTTTTTTFFFFFFFFFFFFFTTTFFFTTFFTTFFTTFFTTTTTTTTFFFFFTTFFFFFFFTTFTTTFTTFFFFFFFFFFFFFFFTTTFTTFFFTTFFFFFFTTTFFFFFFFFTTFFFFFTTTTTTFTTTTTFFFFFTTTTFTTTFFFFFFTTFTTFTTTTFFFTTTTTFTTTTFFTTTTTTFFFFFFFFFFTTTFTTTFFFFFTTFFFFFFFFFFFFFFFTTTFTTTTTFT" => "A. F1n",
        "FTTTTTTTTTTFFTTTTFFFTTTTTTTTTTTTTFFFFFTTTTFFTTFFFFFFFTTTTFFTTFFTTTTTTTTFFFFFFFFFFTTTTFFFFFFFFFTTTTTTTTTTTTTTTTTTTTTTTTFFTTTTTFFTTTTTTFFTTTFFTTTTTTTTFFFFFTTFFFTTTFFFFFTTTTTTTFFFTTTTFFFTTTTTTTFFFFFTTTTTTTTTTTTTTTTTTTTTTFFFFTTTFFTTFFTTTTTTFFTTFFTTTTTTTTTTFFFFFFFTTTFFFFFFTTFFFFFFTTTTTTTTTFFFFFFTTFFFFTTTFFFFFFFFTTFFTTFFTTTTTFFTTTFFFFFFFTTFFFTTFFTTTTTFFFFTTTFFTTTTTTTTTFFFTTTTTTTTFFFFFFTTTTTFFTTFFTTTTTTTTTTTTFFFFTTTFFFFTTTTTTTFFFTTTTTTTTTFFTTTTTTTTFFFTTTTTTTTTTFFFFTTTTTTFFFFFFTTFFFFFFFFTTTTFFFTTTTTFFTTTTTTTTTTTTTTTTTFFFFTTTTTFFFFFFFTTTTTFFTTTTTFFTTTTTTTTFFFTTTTTFFFTTTTTTFFTTTTTTTTTTFFTTTTTTTTTFFTTTFFFTTTTTTTTTTTTTTTTTTFFFFTTTTTTTTTTTTTTFFFTTTTTFFFFFFFTTTFFFFFTTTTTTTTTTTTTTTTTTTTTTTFFFTTFFFFFFFTTFFFFFFFFFFFFFTTTTFFTTTTTTTTFFFFFFFFFFFFFFFFFFFFFFTTTTTTTFFTTTTTFFFTTTTFFFFFFFFFTTTTTTTTTTTTTFFFTTTFFTTFFTTFFTTFFFFFFFFTTTTTFFTTTTTTTFFFFFFFFFTTTTTTTTTTTTTTTFFFFFFTTTFFTTTTTTFFFTTTTTTTTFFTTTTTFFFFFFFFFFFFTTTTTFFFFFFFFTTTTTTFFFFFFFFFFTTTFFFFFFFFFFTTFFFFFFTTTTTTTTTTFFFFFFFTTTTTFFTTTTTTTTTTTTTTTFFFFFFFFFFF" => "B. F2 ",
        "TFFFFFFFFFFTTFFFFTTTFFFFFFFFFFFFFTTTTTFFFFTTFFTTTTTTTFFFFTTFFTTFFFFFFFFTTTTTTTTTTFFFFTTTTTTTTTFFFFFFFFFFFFFFFFFFFFFFFFTTFFFFFTTFFFFFFTTFFFTTFFFFFFFFTTTTTFFTTTFFFTTTTTFFFFFFFTTTFFFFTTTFFFFFFFTTTTTFFFFFFFFFFFFFFFFFFFFFFTTTTFFFTTFFTTFFFFFFTTFFTTFFFFFFFFFFTTTTTTTFFFTTTTTTFFTTTTTTFFFFFFFFFTTTTTTFFTTTTFFFTTTTTTTTFFTTFFTTFFFFFTTFFFTTTTTTTFFTTTFFTTFFFFFTTTTFFFTTFFFFFFFFFTTTFFFFFFFFTTTTTTFFFFFTTFFTTFFFFFFFFFFFFTTTTFFFTTTTFFFFFFFTTTFFFFFFFFFTTFFFFFFFFTTTFFFFFFFFFFTTTTFFFFFFTTTTTTFFTTTTTTTTFFFFTTTFFFFFTTFFFFFFFFFFFFFFFFFTTTTFFFFFTTTTTTTFFFFFTTFFFFFTTFFFFFFFFTTTFFFFFTTTFFFFFFTTFFFFFFFFFFTTFFFFFFFFFTTFFFTTTFFFFFFFFFFFFFFFFFFTTTTFFFFFFFFFFFFFFTTTFFFFFTTTTTTTFFFTTTTTFFFFFFFFFFFFFFFFFFFFFFFTTTFFTTTTTTTFFTTTTTTTTTTTTTFFFFTTFFFFFFFFTTTTTTTTTTTTTTTTTTTTTTFFFFFFFTTFFFFFTTTFFFFTTTTTTTTTFFFFFFFFFFFFFTTTFFFTTFFTTFFTTFFTTTTTTTTFFFFFTTFFFFFFFTTTTTTTTTFFFFFFFFFFFFFFFTTTTTTFFFTTFFFFFFTTTFFFFFFFFTTFFFFFTTTTTTTTTTTTFFFFFTTTTTTTTFFFFFFTTTTTTTTTTFFFTTTTTTTTTTFFTTTTTTFFFFFFFFFFTTTTTTTFFFFFTTFFFFFFFFFFFFFFFTTTTTTTTTTT" => "C. F2n",
        _ => panic!("Unknown bitstream: {}", bits)
    }
}
